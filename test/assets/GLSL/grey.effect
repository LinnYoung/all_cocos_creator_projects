// // Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  // precision highp float;

  // #include <cc-global>
  // #include <cc-local>

  // in vec3 a_position;
  // in vec4 a_color;
  // out vec4 v_color;

  // #if USE_TEXTURE
  // in vec2 a_uv0;
  // out vec2 v_uv0;
  // #endif

  // void main () {
  //   vec4 pos = vec4(a_position, 1);

  //   #if CC_USE_MODEL
  //   pos = cc_matViewProj * cc_matWorld * pos;
  //   #else
  //   pos = cc_matViewProj * pos;
  //   #endif

  //   #if USE_TEXTURE
  //   v_uv0 = a_uv0;
  //   #endif

  //   v_color = a_color;

  //   gl_Position = pos;
  // }
  #ifdef GL_ES
precision mediump float;
#endif
uniform sampler2D u_texture;
varying vec2 v_texCoord;
varying vec4 v_fragmentColor;

void mian(){
  float alpha = texture2D(u_texture, v_texCoord).a;
  flat grey = dot(texture2D(u_texture, v_texCoord).rgb, vec3(0.299, 0.587, 0.114));
  gl_FragColor = vec4(grey, grey, grey, alpha);
}

}%


CCProgram fs %{
  precision highp float;
  
  // #include <alpha-test>
  // #include <texture>

  // in vec4 v_color;

  // #if USE_TEXTURE
  // in vec2 v_uv0;
  // uniform sampler2D texture;
  // #endif

  // void main () {
  //   vec4 o = vec4(1, 1, 1, 1);

  //   #if USE_TEXTURE
  //     CCTexture(texture, v_uv0, o);
  //   #endif

  //   o *= v_color;

  //   ALPHA_TEST(o);

  //   gl_FragColor = o;
  // }
  #ifdef GL_ES
precision mediump float;
#endif
uniform sampler2D u_texture;
varying vec2 v_texCoord;
varying vec4 v_fragmentColor;

void mian(){
  float alpha = texture2D(u_texture, v_texCoord).a;
  flat grey = dot(texture2D(u_texture, v_texCoord).rgb, vec3(0.299, 0.587, 0.114));
  gl_FragColor = vec4(grey, grey, grey, alpha);
}

}%


